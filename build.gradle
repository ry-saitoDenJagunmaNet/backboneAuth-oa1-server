buildscript {
    repositories {
        maven {
            url mavenRepo_pluginRelease
            credentials {
                username mavenRepo_userName
                password mavenRepo_password
            }
        }
    }
    ext {
        assertjVersion = '3.16.1'
        logbackClassicVersion = '1.2.3'
        logbackCoreVersion = '1.2.3'
        commonServerVersion = '20.1.40'
        commonCommonVersion = '20.0.87'
        commonValuesVersion = '20.0.44'
        commonUtilsVersion = '20.1.59'
        domaCoreVersion = '2.37.0'
        sf4jApiVersion = '1.7.30'
        springBootVersion = '2.2.4.RELEASE'
        commonTestsVersion = '20.0.8'
        domaSpringBootStarterVersion = '1.4.0'
        jacksonAnnotationVersion = '2.11.1'
        mssqlJdbcVersion='8.3.1.jre11-preview'

    }
}

plugins {
    id 'org.springframework.boot' version "2.3.1.RELEASE"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id 'net.researchgate.release' version '2.8.1'
    id 'java'
    id 'maven-publish'
    id 'idea'
    id "com.github.ben-manes.versions" version '0.28.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.14'
    id "com.github.spotbugs" version "4.4.4"
    id 'jacoco'
}

repositories {
    maven {
        url mavenRepo_libsRelease
        credentials {
            username mavenRepo_userName
            password mavenRepo_password
        }
    }
    maven {
        url mavenRepo_pluginRelease
        credentials {
            username mavenRepo_userName
            password mavenRepo_password
        }
    }
}

group = 'net.jagunma.backbone.auth'
archivesBaseName = 'backboneAuth-oa1-server'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

afterReleaseBuild.dependsOn publish

// jar {
//     enabled = true
// }
// bootJar {
//     enabled = false
// }

idea {
    module {
        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')
    }
}

dependencies {
    implementation "net.jagunma.common2020:jagunma-common-server:${commonServerVersion}"
    implementation "net.jagunma.common2020:jagunma-common-values:${commonValuesVersion}"
    implementation "net.jagunma.common2020:jagunma-common-common:${commonCommonVersion}"
    implementation "net.jagunma.common2020:jagunma-common-utils:${commonUtilsVersion}"
    testImplementation "net.jagunma.common2020:jagunma-common-tests:${commonTestsVersion}"

    implementation 'org.springframework:spring-beans:5.2.7.RELEASE'
    implementation 'org.springframework:spring-jdbc:5.2.7.RELEASE'
    implementation "org.springframework:spring-context"
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.seasar.doma.boot:doma-spring-boot-autoconfigure:${domaSpringBootStarterVersion}"
    implementation "org.seasar.doma:doma-core:${domaCoreVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonAnnotationVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    runtimeOnly "org.slf4j:slf4j-api:${sf4jApiVersion}"
    runtimeOnly "com.microsoft.sqlserver:mssql-jdbc:${mssqlJdbcVersion}"
    implementation "org.springframework.boot:spring-boot-devtools"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testRuntimeOnly "ch.qos.logback:logback-classic:${logbackClassicVersion}"
    testRuntimeOnly "ch.qos.logback:logback-core:${logbackCoreVersion}"

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.1'
}

spotbugs {
    toolVersion = '4.0.0'
    excludeFilter = file("$rootProject.projectDir/src/config/spotbugs/excludeFilter.xml")
    ignoreFailures = true
//        sourceSets = [sourceSets.main]
    maxHeapSize = '1024m'
}

test {
    // 失敗しても後続の処理を継続させる
    ignoreFailures = true
    useJUnitPlatform {
        includeTags 'SMALL'
        excludeTags('MEDIUM', 'LARGE')
    }
    reports {
        junitXml.enabled = true
    }
}

task testSlow(type: Test) {
    ignoreFailures = true
    useJUnitPlatform {
        includeTags('SMALL', 'MEDIUM', 'LARGE')
        excludeTags()
    }
    reports {
        junitXml.enabled = true
    }
}
task testReport(type: TestReport) {
    reportOn project.tasks.test.binResultsDir
    fileTree(dir: it, exclude: ['**/*Test.class', '**/**test/*.class'])
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled = true
    }
    afterEvaluate {
        classDirectories.from(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: ['**/*Test.class', '**/**test/*.class'])
                }))
    }
}
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE11'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
dependencyUpdates {
    // checkForGradleUpdate = true
    // reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }

}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? mavenRepo_libsSnapshot : mavenRepo_libsRelease
            credentials {
                username = mavenRepo_userName
                password = mavenRepo_password
            }
        }
    }
}

import groovy.json.JsonSlurper

// gradle wrapper バージョンを最新化する場合の設定
wrapper {
    doFirst {
        def versionService = new URL('https://services.gradle.org/versions/current')
        gradleVersion = new JsonSlurper().parseText(versionService.text).version
        print("gradleVersion: " + gradleVersion)
    }
}


